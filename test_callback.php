<?php

require_once 'vendor/autoload.php';

use App\Services\FreedomPayService;
use App\Services\WalletService;
use App\Models\PaymentSession;
use App\Models\User;
use Illuminate\Support\Facades\Log;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Laravel
$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

echo "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FreedomPay Callback ===\n\n";

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$user = User::first();
if (!$user) {
    echo "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n";
    exit(1);
}

echo "üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$user->name} (ID: {$user->id})\n";
echo "üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {$user->balance} KZT\n\n";

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–µ—Å—Å–∏—é
$paymentSession = PaymentSession::create([
    'user_id' => $user->id,
    'order_id' => 'TEST-' . time() . '-' . $user->id,
    'amount' => 1000.00,
    'currency' => 'KZT',
    'description' => '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
    'status' => 'pending',
    'payment_provider' => 'freedompay',
    'expires_at' => now()->addHours(1),
]);

echo "üìù –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–µ—Å—Å–∏—è:\n";
echo "   - Order ID: {$paymentSession->order_id}\n";
echo "   - –°—É–º–º–∞: {$paymentSession->amount} KZT\n";
echo "   - –°—Ç–∞—Ç—É—Å: {$paymentSession->status}\n\n";

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
$walletService = new WalletService();
$freedomPayService = new FreedomPayService($walletService);

// –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω—ã–π callback
echo "üß™ –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω—ã–π callback\n";
echo "============================\n";

$successCallbackData = [
    'pg_order_id' => $paymentSession->order_id,
    'pg_payment_id' => '12345',
    'pg_result' => '1',
    'pg_description' => '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
    'pg_salt' => 'test_salt_' . time(),
];

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ callback'–∞
$testSignature = generateTestSignature($successCallbackData);
$successCallbackData['pg_sig'] = $testSignature;

echo "üì® –î–∞–Ω–Ω—ã–µ callback'–∞:\n";
foreach ($successCallbackData as $key => $value) {
    echo "   - {$key}: {$value}\n";
}
echo "\n";

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
$result = $freedomPayService->handleCallback($successCallbackData);

if ($result) {
    echo "‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ\n";
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    $paymentSession->refresh();
    $user->refresh();
    
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n";
    echo "   - –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {$paymentSession->status}\n";
    echo "   - –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {$paymentSession->paid_at}\n";
    echo "   - –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$user->balance} KZT\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    $transaction = $paymentSession->getBalanceTopUpTransaction();
    if ($transaction) {
        echo "   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ID {$transaction->id}, —Å—É–º–º–∞ {$transaction->amount}\n";
    }
} else {
    echo "‚ùå Callback –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
}

echo "\n";

// –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π callback (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω)
echo "üß™ –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π callback (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)\n";
echo "====================================================\n";

$balanceBefore = $user->balance;
$result2 = $freedomPayService->handleCallback($successCallbackData);

if ($result2) {
    echo "‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
    $user->refresh();
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n";
    echo "   - –ë–∞–ª–∞–Ω—Å –¥–æ: {$balanceBefore} KZT\n";
    echo "   - –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {$user->balance} KZT\n";
    
    if ($balanceBefore == $user->balance) {
        echo "‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!\n";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º callback'–µ\n";
    }
} else {
    echo "‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π callback –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
}

echo "\n";

// –¢–µ—Å—Ç 3: –ù–µ—É—Å–ø–µ—à–Ω—ã–π callback
echo "üß™ –¢–µ—Å—Ç 3: –ù–µ—É—Å–ø–µ—à–Ω—ã–π callback\n";
echo "==============================\n";

$failedCallbackData = [
    'pg_order_id' => $paymentSession->order_id,
    'pg_payment_id' => '12346',
    'pg_result' => '0',
    'pg_description' => '–ù–µ—É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
    'pg_salt' => 'test_salt_failed_' . time(),
];

$failedSignature = generateTestSignature($failedCallbackData);
$failedCallbackData['pg_sig'] = $failedSignature;

echo "üì® –î–∞–Ω–Ω—ã–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ callback'–∞:\n";
foreach ($failedCallbackData as $key => $value) {
    echo "   - {$key}: {$value}\n";
}
echo "\n";

$result3 = $freedomPayService->handleCallback($failedCallbackData);

if ($result3) {
    echo "‚úÖ –ù–µ—É—Å–ø–µ—à–Ω—ã–π callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
    $paymentSession->refresh();
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n";
    echo "   - –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {$paymentSession->status}\n";
    echo "   - –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$user->balance} KZT (–Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)\n";
} else {
    echo "‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π callback –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
}

echo "\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===\n";

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è callback'–∞
 */
function generateTestSignature(array $data): string
{
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
    unset($data['pg_sig']);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    ksort($data);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    $signParts = ['result']; // –î–ª—è callback –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'result'
    
    foreach ($data as $value) {
        $signParts[] = (string) $value;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    $signParts[] = 'test_secret_key';
    
    $signatureString = implode(';', $signParts);
    
    return md5($signatureString);
}
