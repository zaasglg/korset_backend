<?php

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ FreedomPay Callback
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Laravel
 */

echo "=== –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ FreedomPay Callback ===\n\n";

// –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö callback'–∞
$testCases = [
    [
        'name' => '–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
        'data' => [
            'pg_order_id' => 'WALLET-123-1234567890-abc123',
            'pg_payment_id' => '12345',
            'pg_result' => '1',
            'pg_description' => '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
            'pg_salt' => 'test_salt_123',
            'pg_sig' => 'test_signature'
        ],
        'expected_status' => 'paid',
        'expected_balance_change' => true
    ],
    [
        'name' => '–ù–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
        'data' => [
            'pg_order_id' => 'WALLET-123-1234567890-abc123',
            'pg_payment_id' => '12346',
            'pg_result' => '0',
            'pg_description' => '–ù–µ—É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
            'pg_salt' => 'test_salt_456',
            'pg_sig' => 'test_signature'
        ],
        'expected_status' => 'failed',
        'expected_balance_change' => false
    ],
    [
        'name' => '–ü–ª–∞—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º "ok"',
        'data' => [
            'pg_order_id' => 'WALLET-123-1234567890-abc123',
            'pg_payment_id' => '12347',
            'pg_result' => 'ok',
            'pg_description' => '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (ok)',
            'pg_salt' => 'test_salt_789',
            'pg_sig' => 'test_signature'
        ],
        'expected_status' => 'paid',
        'expected_balance_change' => true
    ],
    [
        'name' => '–ü–ª–∞—Ç–µ–∂ —Å —á–∏—Å–ª–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 1',
        'data' => [
            'pg_order_id' => 'WALLET-123-1234567890-abc123',
            'pg_payment_id' => '12348',
            'pg_result' => 1,
            'pg_description' => '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (—á–∏—Å–ª–æ)',
            'pg_salt' => 'test_salt_101',
            'pg_sig' => 'test_signature'
        ],
        'expected_status' => 'paid',
        'expected_balance_change' => true
    ]
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
function checkPaymentStatus($data) {
    $status = $data['pg_result'] ?? null;
    
    if ($status === '1' || $status === 1 || $status === 'ok') {
        return 'paid';
    } else {
        return 'failed';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function shouldChangeBalance($data) {
    $status = $data['pg_result'] ?? null;
    
    return ($status === '1' || $status === 1 || $status === 'ok');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏
function generateTestSignature($data, $secretKey = 'test_secret_key') {
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
    unset($data['pg_sig']);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    ksort($data);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    $signParts = ['result']; // –î–ª—è callback –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'result'
    
    foreach ($data as $value) {
        $signParts[] = (string) $value;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    $signParts[] = $secretKey;
    
    $signatureString = implode(';', $signParts);
    
    return md5($signatureString);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
function verifyTestSignature($data, $secretKey = 'test_secret_key') {
    $signature = $data['pg_sig'] ?? '';
    unset($data['pg_sig']);
    
    $expectedSignature = generateTestSignature($data, $secretKey);
    
    return hash_equals($expectedSignature, $signature);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
foreach ($testCases as $index => $testCase) {
    echo "üß™ –¢–µ—Å—Ç " . ($index + 1) . ": {$testCase['name']}\n";
    echo str_repeat("=", strlen($testCase['name']) + 10) . "\n";
    
    $data = $testCase['data'];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    $correctSignature = generateTestSignature($data);
    $data['pg_sig'] = $correctSignature;
    
    echo "üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n";
    foreach ($data as $key => $value) {
        echo "   - {$key}: {$value}\n";
    }
    echo "\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    $actualStatus = checkPaymentStatus($data);
    $statusCorrect = ($actualStatus === $testCase['expected_status']);
    
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:\n";
    echo "   - –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: {$testCase['expected_status']}\n";
    echo "   - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å: {$actualStatus}\n";
    echo "   - " . ($statusCorrect ? "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ" : "‚ùå –û—à–∏–±–∫–∞") . "\n\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    $shouldChange = shouldChangeBalance($data);
    $balanceCorrect = ($shouldChange === $testCase['expected_balance_change']);
    
    echo "üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:\n";
    echo "   - –û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " . ($testCase['expected_balance_change'] ? "–î–∞" : "–ù–µ—Ç") . "\n";
    echo "   - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è: " . ($shouldChange ? "–î–∞" : "–ù–µ—Ç") . "\n";
    echo "   - " . ($balanceCorrect ? "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ" : "‚ùå –û—à–∏–±–∫–∞") . "\n\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    $signatureValid = verifyTestSignature($data);
    echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:\n";
    echo "   - –ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞: " . ($signatureValid ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç") . "\n\n";
    
    // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    $testPassed = $statusCorrect && $balanceCorrect && $signatureValid;
    echo "üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " . ($testPassed ? "‚úÖ –ü–†–û–ô–î–ï–ù" : "‚ùå –ü–†–û–í–ê–õ–ï–ù") . "\n";
    
    echo str_repeat("-", 50) . "\n\n";
}

// –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏
echo "üîß –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏\n";
echo "========================\n";

$testData = [
    'pg_order_id' => 'WALLET-123-1234567890-abc123',
    'pg_payment_id' => '12345',
    'pg_result' => '1',
    'pg_description' => '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
    'pg_salt' => 'test_salt_123',
];

$signature = generateTestSignature($testData);
echo "üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n";
foreach ($testData as $key => $value) {
    echo "   - {$key}: {$value}\n";
}
echo "\n";

echo "üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {$signature}\n\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏
$testData['pg_sig'] = $signature;
$isValid = verifyTestSignature($testData);
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: " . ($isValid ? "–í–∞–ª–∏–¥–Ω–∞" : "–ù–µ–≤–∞–ª–∏–¥–Ω–∞") . "\n\n";

echo "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===\n";
